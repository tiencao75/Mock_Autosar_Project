CPU CORTEX-M4 {
    OS S_OSEK {
        STATUS = EXTENDED;
        STARTUPHOOK = TRUE;
        ERRORHOOK = TRUE;
        STACKOVERFLOWHOOK = TRUE;
        SHUTDOWNHOOK = TRUE;
        PRETASKHOOK = FALSE;
        POSTTASKHOOK = FALSE;
        USEGETSERVICEID = FALSE;
        USEPARAMETERACCESS = FALSE;
        USERESSCHEDULER = FALSE;
        SYSTEMTICKMS = 1;
    };

    /* Task Definitions */
    TASK ReadSensor_Task {
        PRIORITY = 40;
        SCHEDULE = FULL;
	ACTIVATION = 1;
        AUTOSTART = TRUE;
	STACKSIZE = 50;
        EVENT = BE_ReadSensor;
    };

    TASK ProcessData_Task {
        PRIORITY = 30;
        SCHEDULE = FULL;
	ACTIVATION = 1;
        AUTOSTART = FALSE;
	STACKSIZE = 50;
        EVENT = BE_DataReady;
    };

    TASK SendData_Task {
        PRIORITY = 20;
        SCHEDULE = FULL;
	ACTIVATION = 1;
        AUTOSTART = FALSE;
	STACKSIZE = 50;
        EVENT = BE_DataSent;
    };

    /* Event Definitions */
    EVENT BE_ReadSensor {
        TASK = ReadSensor_Task;
    };

    EVENT BE_DataReady {
        TASK = ProcessData_Task;
    };

    EVENT BE_DataSent {
        TASK = SendData_Task;
    };

    /* Alarm Definitions */
    ALARM Rte_ReadSensor_100ms {
        COUNTER = MainCounter;
        ACTION = ACTIVATETASK {
            TASK = ReadSensor_Task;
        };
        AUTOSTART = TRUE {
            ALARMTIME = 1;
            CYCLETIME = 100;
        };
    };

    /* Alarm to trigger ProcessData_Task after ReadSensor_Task finishes */
    ALARM Alrm_ProcessData {
        COUNTER = MainCounter;
        ACTION = ACTIVATETASK {
            TASK = ProcessData_Task;
        };
        AUTOSTART = FALSE;
    };

    /* Counter Definitions */
    COUNTER MainCounter {
        MINCYCLE = 1;
        MAXALLOWEDVALUE = 0xFFFFFFFF;
        TICKSPERBASE = 1;
    };
};
